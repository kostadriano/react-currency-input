{"version":3,"sources":["components/CurrencyInputV2/CurrencyInputV2.js","components/CurrencyInputV2/index.js","App.js","serviceWorker.js","index.js"],"names":["composeFunctions","functions","value","reduce","result","func","CurrencyInputV2","prefix","onChange","defaultEmptyValue","decimalScale","decimalSeparator","thousandSeparator","max","allowNegative","inputProps","children","Number","isNaN","Error","CurrencyParser","findThousandSeparatorsReg","RegExp","getMaxSafeValue","MAX_SAFE_INTEGER","addPrefix","removePrefix","replace","trim","addThousandSeparatorToIntegerPart","removeThousandSeparator","addFloatDecimalSeparator","floatValueToString","toFixed","removeWhiteSpaces","getNumberWithDecimalScale","joinIntegerAndDecimalParts","integerPart","decimalPart","join","splitIntegerAndDecimalParts","split","removeSign","Math","abs","parseFloatToCurrencyString","floatValue","stringValue","stringIntegerNumber","formattedValue","parseCurrencyStringToFloatFormatString","getNewFloatValue","decimalsPartSize","getConvertedNumber","stringFloat","length","parseFloatFormatStringToNumber","parseCurrencyStringToFloat","currencyString","floatString","CurrencyFormatter","useState","cursor","position","target","values","currencyInputValues","setCurrencyInputValues","getNewCursorPosition","useCallback","currentPosition","oldValue","newValue","inputDiffSize","valueTyped","positionIsValid","newPosition","search","getValidPosition","commitChange","cursorCurrentPosition","cursorPosition","useEffect","setSelectionRange","setCursorPositionOnElement","handleValueChange","selectionStart","defaultProps","React","currencyInputV2","setCurrencyInputV2","style","padding","type","min","marginTop","marginBottom","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0d02a5cf.chunk.js","sourcesContent":["\nimport React, { useState, useEffect, useCallback } from 'react';\n\nconst composeFunctions = (...functions) => value => functions.reduce((result, func) => func(result), value);\n\nconst CurrencyFormatter = ({\n  decimalScale = 0,\n  decimalSeparator = '.',\n  thousandSeparator = '',\n  prefix = '',\n  defaultEmptyValue = 0,\n  max = null,\n  allowNegative = false,\n} = {}) => {\n  if (decimalScale !== 0 && thousandSeparator === decimalSeparator) {\n    throw new Error(\n      `CurrencyFormatter: thousand separator (${thousandSeparator}) can not be equal to decimal separator (${decimalSeparator})`\n    );\n  }\n\n  const findThousandSeparatorsReg = new RegExp(`[${thousandSeparator}]`, 'g');\n\n  const getMaxSafeValue = () =>\n    decimalScale === 0 ? Number.MAX_SAFE_INTEGER : Number.MAX_SAFE_INTEGER / 2 ** (decimalScale * 4 - 1);\n\n  const addPrefix = value => `${prefix}${value}`;\n\n  const removePrefix = value => value.replace(prefix.trim(), '');\n\n  const addThousandSeparatorToIntegerPart = value => value.replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandSeparator);\n\n  const removeThousandSeparator = value => value.replace(findThousandSeparatorsReg, '');\n\n  const addFloatDecimalSeparator = value => value.replace(decimalSeparator, '.');\n\n  const floatValueToString = value => value.toFixed(decimalScale);\n\n  const removeWhiteSpaces = value => value.replace(/\\s/g, '');\n\n  const getNumberWithDecimalScale = value => Number(value.toFixed(decimalScale));\n\n  const joinIntegerAndDecimalParts = (integerPart, decimalPart) =>\n    decimalPart ? [integerPart, decimalPart].join(decimalSeparator) : integerPart;\n\n  const splitIntegerAndDecimalParts = value => value.split('.');\n\n  const removeSign = value => (allowNegative ? value : Math.abs(value));\n\n  const parseFloatToCurrencyString = (floatValue = defaultEmptyValue) => {\n    if (Number.isNaN(+floatValue)) return undefined;\n\n    const stringValue = floatValueToString(floatValue);\n\n    const [integerPart, decimalPart] = splitIntegerAndDecimalParts(stringValue);\n\n    const stringIntegerNumber = addThousandSeparatorToIntegerPart(integerPart);\n\n    const formattedValue = joinIntegerAndDecimalParts(stringIntegerNumber, decimalPart);\n\n    return addPrefix(formattedValue);\n  };\n\n  const parseCurrencyStringToFloatFormatString = value =>\n    composeFunctions(removePrefix, removeWhiteSpaces, removeThousandSeparator, addFloatDecimalSeparator)(value);\n\n  const getNewFloatValue = (value, decimalsPartSize) => {\n    switch (true) {\n      case decimalsPartSize === 0: // before = 10.00, after = 5, scale = 2 => 0.05\n        return value / 10 ** decimalScale;\n      case decimalsPartSize > decimalScale: // before = 1.44, after = 1.445, scale = 2 => 14.45\n        return value * 10;\n      case decimalsPartSize < decimalScale: // before = 1.43, after = 1.4, scale = 2 => 0.14\n        return value / 10;\n      default:\n        // before => 13.00, after => 14.00\n        return value;\n    }\n  };\n\n  const getConvertedNumber = stringFloat => {\n    const [, decimalPart] = splitIntegerAndDecimalParts(stringFloat);\n    const decimalsPartSize = decimalPart ? decimalPart.length : 0;\n\n    return {\n      value: getNewFloatValue(Number(stringFloat), decimalsPartSize),\n      decimalsPartSize,\n    };\n  };\n\n  const parseFloatFormatStringToNumber = stringFloat => {\n    if (Number.isNaN(+stringFloat)) return {};\n\n    const { value, decimalsPartSize } = getConvertedNumber(stringFloat);\n\n    const floatValue = removeSign(getNumberWithDecimalScale(value));\n\n    if (max != null && floatValue > max) return {};\n\n    const maxSafeValue = getMaxSafeValue();\n\n    return floatValue > maxSafeValue ? {} : { floatValue, decimalsPartSize };\n  };\n\n  const parseCurrencyStringToFloat = currencyString => {\n    const floatString = parseCurrencyStringToFloatFormatString(currencyString);\n\n    return parseFloatFormatStringToNumber(floatString);\n  };\n\n  return {\n    parseCurrencyStringToFloat,\n    parseFloatToCurrencyString,\n  };\n};\n\nconst CurrencyInputV2 = ({\n  value,\n  prefix,\n  onChange,\n  defaultEmptyValue,\n  decimalScale,\n  decimalSeparator,\n  thousandSeparator,\n  max,\n  allowNegative,\n  inputProps,\n  children,\n}) => {\n  if (Number.isNaN(+value)) {\n    throw new Error(`CurrencyInput: Value (\"${value}\") is not a valid number.`);\n  }\n\n  const CurrencyParser = CurrencyFormatter({\n    prefix,\n    decimalScale,\n    decimalSeparator,\n    thousandSeparator,\n    defaultEmptyValue,\n    max,\n    allowNegative,\n  });\n\n  const [currencyInputValues, setCurrencyInputValues] = useState({\n    cursor: {\n      position: null,\n      target: null,\n    },\n    values: {\n      floatValue: value,\n      formattedValue: CurrencyParser.parseFloatToCurrencyString(value),\n    },\n  });\n\n  const setCursorPositionOnElement = ({ position, target } = {}) => {\n    if (target && position && target.setSelectionRange) {\n      target.setSelectionRange(position, position);\n    }\n  };\n\n  const getNewCursorPosition = useCallback(\n    ({ currentPosition, oldValue, newValue, decimalsPartSize }) => {\n      const inputDiffSize = newValue.length - oldValue.length;\n\n      const positionIsValid = position => {\n        const valueTyped = newValue[position - 1];\n\n        return (\n          (Number.isNaN(+valueTyped) && valueTyped !== thousandSeparator && valueTyped !== decimalSeparator) ||\n          valueTyped === ' '\n        );\n      };\n\n      const getValidPosition = () => {\n        const newPosition = newValue.search(/\\d/);\n\n        return newPosition !== -1 ? newPosition : currentPosition;\n      };\n\n      switch (true) {\n        case decimalsPartSize === 0: // When value is erased and a new one is inputed\n          return newValue.length;\n        case currentPosition >= oldValue.length - 1: // When cursor is on the last position\n          return newValue.length;\n        case inputDiffSize === 2: // When the mask add the number and a separator symbol\n          return currentPosition + 1;\n        case inputDiffSize === -2: // When the mask remove the number and a separator symbol\n          return currentPosition - 1;\n        case positionIsValid(currentPosition): // When cursor is on some letter or white space (probably prefix)\n          return getValidPosition();\n        default:\n          return currentPosition; // Mantain the currentPosition\n      }\n    },\n    [thousandSeparator, decimalSeparator]\n  );\n\n  const commitChange = useCallback(\n    ({ floatValue, cursorCurrentPosition, decimalsPartSize, target }) => {\n      const formattedValue = CurrencyParser.parseFloatToCurrencyString(floatValue);\n\n      if (formattedValue) {\n        const cursorPosition = getNewCursorPosition({\n          currentPosition: cursorCurrentPosition,\n          oldValue: currencyInputValues.values.formattedValue,\n          newValue: formattedValue,\n          decimalsPartSize,\n        });\n\n        const values = {\n          formattedValue,\n          floatValue,\n        };\n\n        setCurrencyInputValues({\n          cursor: {\n            target,\n            position: cursorPosition,\n          },\n          values,\n        });\n\n        if (onChange) onChange(values);\n      }\n    },\n    [CurrencyParser, currencyInputValues.values.formattedValue, getNewCursorPosition, onChange]\n  );\n\n  useEffect(() => {\n    if (value !== currencyInputValues.values.floatValue) {\n      commitChange({ floatValue: value });\n    }\n  }, [value, commitChange, currencyInputValues]);\n\n  useEffect(() => {\n    setCursorPositionOnElement(currencyInputValues.cursor);\n  }, [currencyInputValues]);\n\n  const handleValueChange = ({ target }) => {\n    const { value } = target;\n\n    const cursorCurrentPosition = target ? target.selectionStart : null;\n\n    const { floatValue, decimalsPartSize } = CurrencyParser.parseCurrencyStringToFloat(value);\n    if (floatValue == null) return;\n\n    commitChange({ floatValue, cursorCurrentPosition, decimalsPartSize, target });\n  };\n\n  const getHelpersAndState = () => ({\n    onChange: handleValueChange,\n    values: currencyInputValues.values,\n  });\n\n  return <input\n    value={currencyInputValues.values.formattedValue}\n    onChange={handleValueChange}\n  />\n};\n\nCurrencyInputV2.defaultProps = {\n  value: 0,\n  prefix: 'R$ ',\n  onChange: null,\n  defaultEmptyValue: 0,\n  decimalScale: 2,\n  decimalSeparator: ',',\n  thousandSeparator: '.',\n  max: null,\n  inputProps: {},\n  allowNegative: false,\n};\n\nexport default CurrencyInputV2;\n\n","import React from 'react';\nimport CurrencyInputV2 from './CurrencyInputV2';\n\nexport default () => {\n  const [currencyInputV2, setCurrencyInputV2] = React.useState({\n    formattedValue: '',\n    floatValue: 0,\n    decimalScale: 2,\n    prefix: 'R$ '\n  })\n\n  return (\n    <div style={{padding: 10}}>\n      <h2>New CurrencyInput</h2>\n      <div>\n        Decimals: <input\n          type='number'\n          value={currencyInputV2.decimalScale}\n          min=\"0\"\n          onChange={({ target: { value } }) => {\n            setCurrencyInputV2({\n              ...currencyInputV2,\n              decimalScale: value\n            })\n          }}\n        />\n      </div>\n\n      <div>\n        Prefix : <input\n          value={currencyInputV2.prefix}\n          onChange={({ target: { value } }) => {\n            setCurrencyInputV2({\n              ...currencyInputV2,\n              prefix: value\n            })\n          }}\n        />\n      </div>\n\n      <div style={{ marginTop: 20 }}>\n        Input: <CurrencyInputV2\n          value={currencyInputV2.floatValue}\n          decimalScale={currencyInputV2.decimalScale}\n          prefix={currencyInputV2.prefix}\n          onChange={\n            ({\n              formattedValue,\n              floatValue,\n            }) => setCurrencyInputV2({\n              ...currencyInputV2,\n              formattedValue,\n              floatValue,\n            })\n          }\n        />\n      </div>\n\n      <div>\n        <h4 style={{ marginBottom: 0 }}>\n          FormattedValue: \"{currencyInputV2.formattedValue}\"\n        </h4>\n        <h4 style={{ marginTop: 0 }}>\n          FloatValue: {currencyInputV2.floatValue}\n        </h4>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport CurrencyInputV2 from './components/CurrencyInputV2'\n\nfunction App() {\n  return (\n    <div>\n      <CurrencyInputV2 />\n\n      <hr />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}